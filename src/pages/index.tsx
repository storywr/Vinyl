import Head from "next/head";
import Link from "next/link";
import { UserButton } from "@clerk/nextjs";
import { api } from "~/utils/api";
import { Comment } from "@prisma/client";
import { useQuery } from "@tanstack/react-query";
import { Box, Text, TextField } from "@radix-ui/themes";
import { ChangeEvent, useEffect, useState } from "react";
import useDebouncedValue from "~/hooks/useDebouncedValue";
import Carousel from 'react-multi-carousel';
import 'react-multi-carousel/lib/styles.css';

export const getServerSideProps = (async () => {
  const response = await fetch('https://accounts.spotify.com/api/token', {
    method: 'POST',
    body: new URLSearchParams({
      'grant_type': 'client_credentials',
    }),
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Authorization': 'Basic ' + (Buffer.from(process.env.CLIENT_ID + ':' + process.env.CLIENT_SECRET).toString('base64')),
    },
  });
  const { access_token } = await response.json();
  return { props: { access_token } }
})

const fetchAlbums = async (search: string, access_token: string) => {
  const response = await fetch(`https://api.spotify.com/v1/search?q=${search}&type=album`, {
    method: 'GET',
    headers: { 'Authorization': 'Bearer ' + access_token },
  });
  if (!response.ok) {
    throw new Error('Failed to fetch posts');
  }
  return response.json();
};

interface HomeProps {
  access_token: string
}

export default function Home({ access_token }: HomeProps) {
  // const { data } = api.comments.getAll.useQuery();
  const [search, setSearch] = useState('');
  const debouncedSearch = useDebouncedValue(search, 500)
  const {
    data: albumData,
    isLoading: isLoadingAlbums,
    isError: isErrorAlbums,
    refetch: refetchAlbums
  } = useQuery(['albums', debouncedSearch], () => fetchAlbums(debouncedSearch, access_token))

  useEffect(() => {
    refetchAlbums()
  }, [debouncedSearch])

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    e.preventDefault()
    setSearch(e.target.value)
  }

  const responsive = {
    desktop: {
      breakpoint: { max: 3000, min: 1024 },
      items: 1,
      slidesToSlide: 1 // optional, default to 1.
    },
    tablet: {
      breakpoint: { max: 1024, min: 464 },
      items: 1,
      slidesToSlide: 1 // optional, default to 1.
    },
    mobile: {
      breakpoint: { max: 464, min: 0 },
      items: 1,
      slidesToSlide: 1 // optional, default to 1.
    }
  };
  
  return (
    <>
      <Head>
        <title>Renaissance</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen items-center flex-col bg-slate-900">
        <Box ml='auto'>
          <Box p='4'>
            <UserButton afterSignOutUrl='/' />
          </Box>
        </Box>
        <Box>
          <TextField.Root className='w-72'>
            <TextField.Input placeholder="Search art..." onChange={handleChange} />
          </TextField.Root>
        </Box>
        <div className='justify-center items-center w-full m-auto'>
          <Carousel responsive={responsive}>
            {albumData?.albums?.items?.map((album: any) => (
              <img key={album.id} src={album?.images[0].url} className='m-auto' />
            )) ?? []}
          </Carousel>
        </div>
      </main>
    </>
  );
}
